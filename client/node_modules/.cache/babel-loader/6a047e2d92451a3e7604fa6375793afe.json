{"ast":null,"code":"var _jsxFileName = \"/Users/matthewpryor/projects/shop-shop/client/src/utils/GlobalState.js\";\n// createContext -- create the container to hold our global state data and functionality so we can provide it throughout our app\n// useContext -- React Hook that will allow us to use the state created from the createContext function\nimport React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\nconst StoreContext = createContext(); // The Provider is a special type of React component that we wrap our application in so it can make the state data that's passed into it as a prop available to all other components.\n\nconst {\n  Provider\n} = StoreContext(); // The Consumer is our means of grabbing and using the data that the Provider holds for us.\n\nconst StoreProvider = _ref => {\n  let {\n    value = [],\n    ...props\n  } = _ref;\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    categories: [],\n    currentCategory: ''\n  }); // use this to confirm it works!\n\n  console.log(state);\n  return /*#__PURE__*/React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }\n  }));\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"names":["React","createContext","useContext","useProductReducer","StoreContext","Provider","StoreProvider","value","props","state","dispatch","products","categories","currentCategory","console","log","useStoreContext"],"sources":["/Users/matthewpryor/projects/shop-shop/client/src/utils/GlobalState.js"],"sourcesContent":["// createContext -- create the container to hold our global state data and functionality so we can provide it throughout our app\n// useContext -- React Hook that will allow us to use the state created from the createContext function\nimport React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\n// The Provider is a special type of React component that we wrap our application in so it can make the state data that's passed into it as a prop available to all other components.\nconst { Provider } = StoreContext();\n\n// The Consumer is our means of grabbing and using the data that the Provider holds for us.\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        categories: [],\n        currentCategory: '',\n    });\n\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAEA,MAAMC,YAAY,GAAGH,aAAa,EAAlC,C,CACA;;AACA,MAAM;EAAEI;AAAF,IAAeD,YAAY,EAAjC,C,CAEA;;AAEA,MAAME,aAAa,GAAG,QAA8B;EAAA,IAA7B;IAAEC,KAAK,GAAG,EAAV;IAAc,GAAGC;EAAjB,CAA6B;EAChD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,iBAAiB,CAAC;IACxCQ,QAAQ,EAAE,EAD8B;IAExCC,UAAU,EAAE,EAF4B;IAGxCC,eAAe,EAAE;EAHuB,CAAD,CAA3C,CADgD,CAOhD;;EACAC,OAAO,CAACC,GAAR,CAAYN,KAAZ;EACA,oBAAO,oBAAC,QAAD;IAAU,KAAK,EAAE,CAACA,KAAD,EAAQC,QAAR;EAAjB,GAAwCF,KAAxC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAP;AACH,CAVD;;AAYA,MAAMQ,eAAe,GAAG,MAAM;EAC1B,OAAOd,UAAU,CAACE,YAAD,CAAjB;AACH,CAFD;;AAIA,SAASE,aAAT,EAAwBU,eAAxB"},"metadata":{},"sourceType":"module"}